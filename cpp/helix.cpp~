//helix.cpp

/*
% *******************************************
% *******************************************
% function [ fvec, J]= helix(n,m,x,opt)
%
% Helical valley function  [7]
% Dimensions    n=3,   m=3
% Function Definition:
%       f1(x) = 10[x3 - 10*(x1,x2)]
%       f2(x) = 10[((x1)^2 + (x2)^2)^.5 -1]
%       f3(x) = x3
% Standard starting point  x= (-1,0,0)
% Minima of f=0 at (1,0,0)
%
% Revised 10/23/94   PLK
% *********************************************

*/

#include <iostream>
#include <vector>
#include <iomanip> 
#include <cmath> 
#include "valder.h"
using namespace std;



int main()
{
	  
	double x1,x2,x3,p;
	
	p = 1/(2*3.1416);
	
	cout<<"Enter values for x1 x2 and x3:";
      	cin >> x1 >> x2 >> x3;



      	valder v_2,v_1,v0,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,f1,f2,f3;
	int vali;
      	double der1[] = {1,0,0};
      	double der2[] = {0,1,0};
	double der3[] = {0,0,1};
      
	v_2.val = x1;
      	v_2.der= vector<double>(der1, der1 + sizeof(der1) / sizeof(der1[0]) );

      	v_1.val = x2;
      	v_1.der = vector<double>(der2, der2 + sizeof(der2) / sizeof(der2[0]) );

	v0.val = x3;
      	v0.der = vector<double>(der3, der3 + sizeof(der3) / sizeof(der3[0]) );

	v1 = v_1/v_2;
cout<<v1.der[0]<<v1.der[1]<<v1.der[2]<<endl;
	v2 = atan(v1);
cout<<v2.der[0]<<v2.der[1]<<v2.der[2]<<endl;
	v3 = p*v2;
	v4 = v3+0.5;
	if(x1 > 0)
	{
		v5 = 10*v3;
		v6 = v0-v5;
		f1 = 10*v6;
	}
	if(x1 < 0)
	{
		v7 = 10*v4;
		v8 = v0-v7;
		f1 = 10*v8;
	}
	v9 = pow(v_2,2);
	v10 = pow(v_1,2);
	v11 = v9+v10;
	v12 = sqrt(v11);
	v13 = v12-1;
	f2 = 10*v13;
	f3 = v0;
	
 	cout<<"F :"<<endl << f1.val<<" "<<f2.val<<" "<<f3.val<<endl;
      	cout<<"J: "<<endl;
      	for(int i=0; i<f1.der.size(); i++ )
		cout<<setw(10) << left<<f1.der[i]<<" ";
      	cout<< endl;
      	for(int i=0; i<f2.der.size(); i++ )
		cout<<setw(10) << left<<f2.der[i]<<" ";
      	cout<< endl;
   	for(int i=0; i<f3.der.size(); i++ )
		cout<<setw(10) << left<<f3.der[i]<<" ";
      	cout<< endl;
   
	      
  
    	return 0;
}
