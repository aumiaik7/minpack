function [fvec,J] = helix(n,m,x,opt)

% *******************************************
% *******************************************
% function [ fvec, J]= helix(n,m,x,opt)
%
% Helical valley function  [7]
% Dimensions    n=3,   m=3
% Function Definition:
%       f1(x) = 10[x3 - 10*(x1,x2)]
%       f2(x) = 10[((x1)^2 + (x2)^2)^.5 -1]
%       f3(x) = x3
% Standard starting point  x= (-1,0,0)
% Minima of f=0 at (1,0,0)
%
% Revised 10/23/94   PLK
% *********************************************
  
if ((opt==1) | (opt ==3))
    if x(1) > 0
	   fvec(1)  =  10*(x(3)-10*((1/(2*pi))*atan(x(2)/x(1))));                                        
    elseif x(1) < 0
	   fvec(1)  =  10*(x(3)-10*((1/(2*pi))*atan(x(2)/x(1))+.5));                       
    end
    fvec(2)  = 10*((x(1)^2+x(2)^2)^.5-1);
    fvec(3)  = x(3);
    fvec=fvec'; 
else fvec='?';
end;

if ((opt ==2) | (opt == 3))
        J(1,1)   =    (50/pi)*(x(2)/x(1)^2)*(1/(1+(x(2)/x(1))^2))
        J(1,2)   =    (-50/pi)*(1/x(1))*(1/(1+(x(2)/x(1))^2))
        J(1,3)   =    10

        J(2,1)   =    (10*x(1))/sqrt(x(1)^2+x(2)^2)
        J(2,2)   =    (10*x(2))/sqrt(x(1)^2+x(2)^2)
        J(2,3)   =    0

        J(3,1)   =    0
        J(3,2)   =    0
        J(3,3)   =    1
    else J='?';
end;
 
if ((opt <1) | (opt >3))
        disp('Error: Option value sent to HELIX.M is either <1 or >3');
end;

%{function [fvec,J] = helix(a)
p=1/(2*pi);
x = valder(a(1),[1 0 0]);
y = valder(a(2),[0 1 0]);
z = valder(a(3),[0 0 1]);
%p=1/(2*pi);
v1=y/x;
v2=atan(v1);
v3=p*v2;
v4=v3+0.5;
if a(1)>0
	v5=10*v3;
	v6=z-v5;
	f1=10*v6
end
if a(1)<0
	v7=10*v4;
	v8=z-v7;
	f1=10*v8
end
v9=x^2;
v10=y^2;
v11=v9+v10;
v12=sqrt(v11);
v13=v12-1;
f2=10*v13
f3=z
values = [double(f1); double(f2); double(f3)];
F = values(:,1)
J = values(:,2:4)

%}






